#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define MAX_SIZE 1<<11
#define INF 999999999
using namespace std;


class CasketOfStarEasy {
    public:
        int dp[MAX_SIZE];
        int weight_size;
        vector<int> my_weight;
        string i2s_convert(int state){
            string s = "";
            int cnt = weight_size;
            while(cnt>0){
                if(state%2){
                    s+='1';
                }else{
                    s+='0';
                }
                state>>=1;
                cnt--;
            }
            return s;
        }
        int s2i_convert(string s){
            int sum = 0;
            for(int i = 0; i<s.size();i++){
                if(s[i]=='1'){
                    sum+= (1<<i);
                }
            }return sum;
        }
        int get_value(int state){
            if(dp[state]!=-1){
                return dp[state];
            }
            string s = i2s_convert(state);
            int max_v = -INF;
            for(int i=0; i<weight_size; i++){
                if(s[i]=='1'){
                    int pre=-1, after=-1;
                    for(int j = i-1; j>=0; j--){
                        if(s[j]=='1'){
                            pre=j;
                            break;
                        }
                    }
                    for(int j = i+1; j<weight_size; j++){
                        if(s[j]=='1'){
                            after=j;
                            break;
                        }
                    }
                    if(pre!=-1 && after!=-1){
                        string t = s;
                        t[i] = '0';
                        int new_s = s2i_convert(t);
                        //cout<<"now state is "<<t<<" and i'm adding "<<my_weight[pre]*my_weight[after]<<endl;
                        int v = get_value(new_s)+my_weight[pre]*my_weight[after];
                        if(v > max_v){
                            max_v = v;
                        }
                    }
                }
            }
            
            //cout<<"state now "<<s<<" value is "<<max_v<<endl;
            dp[state] = max_v;
            return dp[state];
        }
        void init(){
            string s = "";
            for(int i=0; i<weight_size; i++)s+='0';
            for(int i=0; i<weight_size; i++){
                for(int j= i+2; j<weight_size; j++){
                    string t=s;
                    t[i]='1';
                    t[j]='1';
                    dp[s2i_convert(t)] = 0;
                }
            }
        }
        int maxEnergy(vector <int> weight) {
            my_weight = weight;
            memset(dp,-1,sizeof(dp));
            weight_size = weight.size();
            init();
            string init_state = "";
            for(int i=0; i<weight_size; i++){
                init_state+='1';
            }
            int res = get_value(s2i_convert(init_state)); 
            return res;
        }
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	CasketOfStarEasy *obj;
	int answer;
	obj = new CasketOfStarEasy();
	clock_t startTime = clock();
	answer = obj->maxEnergy(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
    //return 0;	
	{
	// ----- test 1 -----
	int t0[] = {100,2,1,3,100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10400;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {2,2,7,6,90,5,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1818;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {477,744,474,777,447,747,777,474};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2937051;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,1,1,1,1,1,1,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
    {	
	// ----- test 4 -----
	int t0[] = {1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

    {	
	// ----- test 4 -----
	int t0[] = {1000,1,1000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1000000;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
