#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

#define INF 99999999
#define MAX_SIZE 51
using namespace std;


class FoxPlayingGame {
    public:
        double dp[MAX_SIZE][MAX_SIZE][2];
        double scoreA, scoreB;
        void init(){
            for(int i=0; i<MAX_SIZE;i++){
                for(int j=0;j<MAX_SIZE;j++){
                    dp[i][j][0]=-INF;
                    dp[i][j][1]=-INF;
                }
            }
        }
        double MAX(double x, double y){
            return (x>y)?x:y;
        }
        double MIN(double x, double y){
            return (x>y)?y:x;
        }
        double get_x_y(int x, int y, int k){
            if(x<0 || y<0){
                return -INF;
            }
            if(dp[x][y][k]!=-INF){
                return dp[x][y][k];
            }
            cout<<"call "<<x<<" "<<y<<endl;
            double x1, x2, x3, x4, cur;
            x1 = get_x_y(x-1, y, 0);
            x2 = get_x_y(x-1, y, 1);
            x3 = get_x_y(x, y-1, 0);
            x4 = get_x_y(x, y-1, 1);
            if(k==0){ 
            if(x1!=-INF){
                cur = x1+scoreA;
            }
            if(x2!=-INF){
                cur = MAX( cur, x2+scoreA);
            }
            if(scoreB>=0 && x3!=-INF){
                cur = MAX(x3*scoreB, cur);
            }
            if(scoreB<0 && x4!=-INF){
                cur = MAX(x4*scoreB, cur);
            }
            dp[x][y][0]=cur;
            return cur;
            }else{
            if(x1!=-INF){
                cur = x1;
            }
            if(x2!=-INF){
                cur = MIN(x1+scoreA, x2+scoreA);
            }
            if(scoreB<0&&x3!=-INF){
                cur = MIN(x3*scoreB, cur);
            }
            if(scoreB<0&&x3!=-INF){
                cur = MIN(x4*scoreB, cur);
            }
            dp[x][y][1]=cur;
            return cur;
            }
        }

        double theMax(int nA, int nB, int paramA, int paramB) {
            init();
            scoreA = paramA/1000.0;
            scoreB = paramB/1000.0;
            dp[0][0][0]=0.0;
            dp[0][0][1]=0.0;
            double ans = get_x_y(nA, nB,0);
            ans = MAX(ans, get_x_y(nA, nB,1));
            return ans;
        }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FoxPlayingGame *obj;
	double answer;
	obj = new FoxPlayingGame();
	clock_t startTime = clock();
	answer = obj->theMax(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 5;
	p1 = 4;
	p2 = 3000;
	p3 = 2000;
	p4 = 240.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 3;
	p2 = 2000;
	p3 = 100;
	p4 = 6.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	p1 = 3;
	p2 = -2000;
	p3 = 2000;
	p4 = -8.0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5;
	p1 = 5;
	p2 = 2000;
	p3 = -2000;
	p4 = 160.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 50;
	p1 = 50;
	p2 = 10000;
	p3 = 2000;
	p4 = 5.62949953421312E17;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 41;
	p1 = 34;
	p2 = 9876;
	p3 = -1234;
	p4 = 515323.9982341775;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
